#!/bin/sh
set -eu

usage() {
  cat <<EOF
Usage:
  $0 run <file.cpp>
  $0 test <path/to/.../src/file.cpp>

Notes:
- test infers:
    tests file:  <root>/tests/test_<file>.cpp
    headers dir: <root>/headers
  where <root> is the directory above 'src'.

- GTest auto-detect:
    include/lib at /c/MinGW or /c/mingw64
  Override with:
    GTEST_INCLUDE_DIR=...  GTEST_LIB_DIR=...
EOF
}

run() {
  file="${1:?missing .cpp file}"
  exe="${file%.cpp}"
  g++ "$file" -o "$exe"
  "./$exe"
  rm -f "$exe"
}

detect_gtest_paths() {
  # Env vars first
  if [ -n "${GTEST_INCLUDE_DIR:-}" ] && [ -n "${GTEST_LIB_DIR:-}" ]; then
    echo "$GTEST_INCLUDE_DIR|$GTEST_LIB_DIR"; return 0
  fi

  # Common Windows MinGW locations
  for ROOT in /c/MinGW /c/mingw64; do
    if [ -f "$ROOT/include/gtest/gtest.h" ]; then
      echo "$ROOT/include|$ROOT/lib"; return 0
    fi
  done

  echo "|"; return 1
}

test_only_src() {
  src="${1:?missing src .cpp path}"
  [ -f "$src" ] || { echo "Error: '$src' not found"; exit 1; }

  src_dir=$(dirname "$src")
  case "$src_dir" in
    */src) : ;;
    *) echo "Error: source must be inside a 'src' directory (got: $src_dir)"; exit 1 ;;
  esac

  root="${src_dir%/src}"
  tests_dir="$root/tests"
  headers_dir="$root/headers"

  base="$(basename "$src")"
  stem="${base%.cpp}"
  test_file="$tests_dir/test_${stem}.cpp"
  exe="test_${stem}"

  [ -f "$test_file" ] || { echo "Error: test file not found: $test_file"; exit 1; }
  [ -d "$headers_dir" ] || { echo "Warning: headers dir not found: $headers_dir"; }

  DETECTED="$(detect_gtest_paths || true)"
  GINC="$(echo "$DETECTED" | cut -d'|' -f1)"
  GLIB="$(echo "$DETECTED" | cut -d'|' -f2)"

  CFLAGS="-std=c++17 -DTESTING -I\"$headers_dir\" -I\"$src_dir\""
  [ -n "$GINC" ] && CFLAGS="$CFLAGS -I\"$GINC\""

  # No -pthread on MinGW
  LDFLAGS=""
  [ -n "$GLIB" ] && LDFLAGS="$LDFLAGS -L\"$GLIB\""
  LDFLAGS="$LDFLAGS -lgtest -lgtest_main"

  echo "Compiling:"
  echo "  src:     $src"
  echo "  test:    $test_file"
  echo "  headers: $headers_dir"
  [ -n "$GINC" ] && echo "  gtest include: $GINC"
  [ -n "$GLIB" ] && echo "  gtest lib:     $GLIB"
  echo

  # shellcheck disable=SC2086
  eval g++ $CFLAGS \"$src\" \"$test_file\" $LDFLAGS -o \"$exe\"

  "./$exe"
  status=$?
  rm -f "$exe"
  exit "$status"
}

cmd="${1:-}"
case "$cmd" in
  run)  shift; run "$@";;
  test) shift; test_only_src "$@";;
  *)    usage; exit 1;;
esac
