#!/bin/sh
set -eu

usage() {
  cat <<EOF
Usage:
  $0 run <file.cpp>
  $0 test <path/to/.../src/file.cpp>

Notes:
- test infers:
    tests file:  <root>/tests/test_<file>.cpp
    headers dir: <root>/headers
  where <root> is the dir above 'src'.
- GTest lookup order:
    1) Prebuilt libs if visible (-lgtest -lgtest_main)
    2) Fallback: compile vendored sources (googletest/googletest/src/gtest-all.cc)
- Env overrides:
    GTEST_ROOT=/path/to/googletest             (folder containing "googletest/" subdir)
    GTEST_INCLUDE_DIR=/path/include            (if not using GTEST_ROOT)
    GTEST_SRC=/path/to/gtest-all.cc            (if not using GTEST_ROOT)
    GTEST_LIB_DIR=/path/to/lib                 (if you do have prebuilt libs)
EOF
}

# Original one-file runner
run() {
  file="${1:?missing .cpp file}"
  exe="${file%.cpp}"
  g++ "$file" -o "$exe"
  "./$exe"
  rm -f "$exe"
}

# Try to detect prebuilt libs or vendored sources
detect_gtest_mode() {
  # If GTEST_LIB_DIR is set, assume prebuilt
  if [ -n "${GTEST_LIB_DIR:-}" ]; then
    echo "prebuilt"; return 0
  fi

  # If we see libs in MinGW, assume prebuilt
  if [ -f "/c/MinGW/lib/libgtest.a" ] || [ -f "/c/MinGW/lib/libgtest_main.a" ]; then
    echo "prebuilt"; return 0
  fi

  # If GTEST_ROOT is set or vendored folder exists, use sources
  if [ -n "${GTEST_ROOT:-}" ] || [ -d "./googletest/googletest/src" ]; then
    echo "sources"; return 0
  fi

  # If explicit GTEST_SRC provided
  if [ -n "${GTEST_SRC:-}" ]; then
    echo "sources"; return 0
  fi

  # Nothing found
  echo "none"; return 1
}

test_only_src() {
  src="${1:?missing src .cpp path}"
  [ -f "$src" ] || { echo "Error: '$src' not found"; exit 1; }

  src_dir=$(dirname "$src")
  case "$src_dir" in
    */src) : ;;
    *) echo "Error: source must be inside a 'src' directory (got: $src_dir)"; exit 1 ;;
  esac

  root="${src_dir%/src}"
  tests_dir="$root/tests"
  headers_dir="$root/headers"

  base="$(basename "$src")"                 # e.g., 13_sum_of_n_natural.cpp
  stem="${base%.cpp}"                       # e.g., 13_sum_of_n_natural
  test_file="$tests_dir/test_${stem}.cpp"   # e.g., tests/test_13_sum_of_n_natural.cpp
  exe="test_${stem}"

  [ -f "$test_file" ] || { echo "Error: test file not found: $test_file"; exit 1; }

  MODE="$(detect_gtest_mode || true)"

  CFLAGS="-std=c++17 -I\"$headers_dir\" -I\"$src_dir\""
  LDFLAGS=""
  GTEST_MSG=""

  if [ "$MODE" = "prebuilt" ]; then
    # Prebuilt libs
    GINC="${GTEST_INCLUDE_DIR:-/c/MinGW/include}"
    GLIB="${GTEST_LIB_DIR:-/c/MinGW/lib}"
    CFLAGS="$CFLAGS -I\"$GINC\""
    LDFLAGS="$LDFLAGS -L\"$GLIB\" -lgtest -lgtest_main"
    GTEST_MSG="(linking prebuilt gtest)"

  elif [ "$MODE" = "sources" ]; then
    # Compile sources directly (no cmake)
    if [ -z "${GTEST_ROOT:-}" ]; then
      # default to vendored ./googletest
      GTEST_ROOT="./googletest"
    fi
    GINC="${GTEST_INCLUDE_DIR:-$GTEST_ROOT/googletest/include}"
    GSRC="${GTEST_SRC:-$GTEST_ROOT/googletest/src/gtest-all.cc}"

    [ -f "$GINC/gtest/gtest.h" ] || { echo "Error: gtest headers not found at $GINC"; exit 1; }
    [ -f "$GSRC" ] || { echo "Error: gtest-all.cc not found at $GSRC"; exit 1; }

    CFLAGS="$CFLAGS -I\"$GINC\""
    # We add gtest-all.cc as a compilation unit; no libs needed
    GTEST_SRC_ARG="\"$GSRC\""
    GTEST_MSG="(compiling gtest sources)"
  else
    echo "GoogleTest not found. Either:"
    echo "  - Install libs in C:\\MinGW (headers in include\\gtest, libs in lib), or"
    echo "  - Vendor the sources: place 'googletest/' folder next to run.sh, or"
    echo "  - Set GTEST_ROOT to your googletest checkout."
    exit 1
  fi

  echo "Compiling:"
  echo "  src:       $src"
  echo "  test:      $test_file"
  echo "  headers:   $headers_dir"
  echo "  gtest mode $GTEST_MSG"
  [ "${GINC:-}" ] && echo "  gtest inc: $GINC"
  [ "${GLIB:-}" ] && echo "  gtest lib: $GLIB"
  echo

  if [ "$MODE" = "sources" ]; then
    # shellcheck disable=SC2086
    eval g++ $CFLAGS \"$src\" \"$test_file\" $GTEST_SRC_ARG -o \"$exe\"
  else
    # shellcheck disable=SC2086
    eval g++ $CFLAGS \"$src\" \"$test_file\" $LDFLAGS -o \"$exe\"
  fi

  "./$exe"
  status=$?
  rm -f "$exe"
  exit "$status"
}

cmd="${1:-}"
case "$cmd" in
  run)  shift; run "$@";;
  test) shift; test_only_src "$@";;
  *)    usage; exit 1;;
esac
